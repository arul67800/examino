// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

// Academic Hierarchy Models - Question Bank System
model QuestionBankHierarchy {
  id          String   @id @default(cuid())
  name        String
  level       Int      // 1=Year, 2=Subject, 3=Part, 4=Section, 5=Chapter
  type        String   // Year/Subject/Part/Section/Chapter
  color       String?  // Optional color for UI
  order       Int      @default(0) // For ordering items at same level
  
  // Self-referencing hierarchy
  parentId    String?
  parent      QuestionBankHierarchy? @relation("QBHierarchyParent", fields: [parentId], references: [id], onDelete: Cascade)
  children    QuestionBankHierarchy[] @relation("QBHierarchyParent")
  
  // Question count for chapters (level 5)
  questionCount Int @default(0)
  
  // Publishing status for sidebar visibility
  isPublished Boolean @default(false)
  
  // Questions relationship
  questions   Question[] @relation("QuestionBankQuestions")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("question_bank_hierarchy")
}

// Academic Hierarchy Models - Previous Papers System
model PreviousPapersHierarchy {
  id          String   @id @default(cuid())
  name        String
  level       Int      // 1=Exam, 2=Year, 3=Subject, 4=Section, 5=Chapter
  type        String   // Exam/Year/Subject/Section/Chapter
  color       String?  // Optional color for UI
  order       Int      @default(0) // For ordering items at same level
  
  // Self-referencing hierarchy
  parentId    String?
  parent      PreviousPapersHierarchy? @relation("PPHierarchyParent", fields: [parentId], references: [id], onDelete: Cascade)
  children    PreviousPapersHierarchy[] @relation("PPHierarchyParent")
  
  // Question count for chapters (level 5)
  questionCount Int @default(0)
  
  // Publishing status for sidebar visibility
  isPublished Boolean @default(false)
  
  // Questions relationship (previous papers questions)
  questions   Question[] @relation("PreviousPapersQuestions")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("previous_papers_hierarchy")
}

// Legacy hierarchy model - keep for backward compatibility during migration
model HierarchyItem {
  id          String   @id @default(cuid())
  name        String
  level       Int      // 1=Year, 2=Subject, 3=Part, 4=Section, 5=Chapter
  type        String   // Year/Subject/Part/Section/Chapter
  color       String?  // Optional color for UI
  order       Int      @default(0) // For ordering items at same level
  
  // Self-referencing hierarchy
  parentId    String?
  parent      HierarchyItem? @relation("HierarchyParent", fields: [parentId], references: [id], onDelete: Cascade)
  children    HierarchyItem[] @relation("HierarchyParent")
  
  // Question count for chapters (level 5)
  questionCount Int @default(0)
  
  // Publishing status for sidebar visibility
  isPublished Boolean @default(false)
  
  // Questions relationship (legacy)
  questions   Question[] @relation("LegacyQuestions")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hierarchy_items")
}

// MCQ/Question Models
model Question {
  id            String      @id @default(cuid())
  humanId       String      @unique // Human-readable ID like "ANAT-UL-SR-BSA-Q001"
  type          QuestionType
  question      String      // Question text (can contain HTML from rich editor)
  explanation   String?     // Explanation text (can contain HTML)
  references    String?     // References text (can contain HTML)
  difficulty    Difficulty  @default(MEDIUM)
  points        Int         @default(1)
  timeLimit     Int?        // Time limit in seconds
  tags          String?     // JSON string of tags array (legacy)
  sourceTags    String?     // JSON string of source tags array
  examTags      String?     // JSON string of exam tags array
  
  // Hierarchy relationships - only one should be populated at a time
  hierarchyItemId String?
  hierarchyItem   HierarchyItem? @relation("LegacyQuestions", fields: [hierarchyItemId], references: [id], onDelete: Cascade)
  
  questionBankHierarchyId String?
  questionBankHierarchy   QuestionBankHierarchy? @relation("QuestionBankQuestions", fields: [questionBankHierarchyId], references: [id], onDelete: Cascade)
  
  previousPapersHierarchyId String?
  previousPapersHierarchy   PreviousPapersHierarchy? @relation("PreviousPapersQuestions", fields: [previousPapersHierarchyId], references: [id], onDelete: Cascade)
  
  // Question options
  options       QuestionOption[]
  
  // Assertion-Reasoning specific fields
  assertion     String?
  reasoning     String?
  
  // Metadata
  createdBy     String?     // User who created the question
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isActive      Boolean     @default(true)
  
  @@map("questions")
}

// Tags System
model Tag {
  id          String   @id @default(cuid())
  name        String   // Tag name
  category    TagCategory // sources or exams
  usageCount  Int      @default(1) // How many times this tag has been used
  createdBy   String?  // User who first created this tag
  isPreset    Boolean  @default(false) // Whether this is a preset tag
  isActive    Boolean  @default(true) // Whether this tag is active/visible
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Ensure unique tag names per category
  @@unique([name, category])
  @@map("tags")
}

model QuestionOption {
  id          String    @id @default(cuid())
  text        String    // Option text
  isCorrect   Boolean   @default(false)
  order       Int       @default(0) // Order of options
  explanation String?   // Individual explanation for this option
  references  String?   // Individual references for this option
  
  // Relationship to question
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("question_options")
}

// Enums
enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE  
  TRUE_FALSE
  ASSERTION_REASONING

  @@map("question_type")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD

  @@map("difficulty")
}

enum TagCategory {
  SOURCES
  EXAMS

  @@map("tag_category")
}
