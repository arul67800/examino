import React, { memo, useCallback, useRef, useState, useEffect } from 'react';
import { useTheme } from '@/theme';
import { TableCell as TableCellType, CellStyle } from '../types/table.types';
import { useTable } from '../context/TableContext';
import { 
  Edit3, Link, Image, Calculator, AlertTriangle, 
  Lock, Eye, EyeOff, MessageSquare, Star,
  CheckSquare, Square, Circle, Hash
} from 'lucide-react';

export interface TableCellProps {
  cell: TableCellType;
  rowId: string;
  columnId: string;
  rowIndex: number;
  columnIndex: number;
  isSelected: boolean;
  isEditing: boolean;
  isMerged?: boolean;
  mergedSpan?: { rowSpan: number; colSpan: number };
  style?: React.CSSProperties;
  className?: string;
  onDoubleClick?: (cellId: string) => void;
  onContextMenu?: (e: React.MouseEvent, cellId: string) => void;
  onKeyDown?: (e: React.KeyboardEvent, cellId: string) => void;
  onClick?: (cellId: string, e: React.MouseEvent) => void;
}

export const TableCell = memo<TableCellProps>(({
  cell,
  rowId,
  columnId,
  rowIndex,
  columnIndex,
  isSelected,
  isEditing,
  isMerged = false,
  mergedSpan = { rowSpan: 1, colSpan: 1 },
  style = {},
  className = '',
  onDoubleClick,
  onContextMenu,
  onKeyDown,
  onClick
}) => {
  const { theme } = useTheme();
  const { updateCell, startEditing, stopEditing } = useTable();
  const [inputValue, setInputValue] = useState(cell.content);
  const [isHovered, setIsHovered] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);
  
  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);
  const cellRef = useRef<HTMLTableCellElement>(null);

  // Auto-focus and select content when editing starts
  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  // Update input value when cell content changes\n  useEffect(() => {\n    setInputValue(cell.content);\n  }, [cell.content]);\n\n  // Validate cell content\n  useEffect(() => {\n    if (cell.validation) {\n      const errors: string[] = [];\n      \n      cell.validation.rules?.forEach(rule => {\n        switch (rule.type) {\n          case 'required':\n            if (!cell.content || cell.content.trim() === '') {\n              errors.push(rule.message);\n            }\n            break;\n          case 'email':\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            if (cell.content && !emailRegex.test(cell.content)) {\n              errors.push(rule.message);\n            }\n            break;\n          case 'url':\n            try {\n              if (cell.content) {\n                new URL(cell.content);\n              }\n            } catch {\n              errors.push(rule.message);\n            }\n            break;\n          case 'range':\n            const numValue = parseFloat(cell.content);\n            if (!isNaN(numValue)) {\n              if (rule.rule.min !== undefined && numValue < rule.rule.min) {\n                errors.push(rule.message);\n              }\n              if (rule.rule.max !== undefined && numValue > rule.rule.max) {\n                errors.push(rule.message);\n              }\n            }\n            break;\n        }\n      });\n      \n      setValidationErrors(errors);\n    }\n  }, [cell.content, cell.validation]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setInputValue(e.target.value);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    updateCell(cell.id, { content: inputValue });\n    stopEditing();\n  }, [cell.id, inputValue, updateCell, stopEditing]);\n\n  const handleInputKeyDown = useCallback((e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'Enter':\n        if (!e.shiftKey) {\n          e.preventDefault();\n          updateCell(cell.id, { content: inputValue });\n          stopEditing();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        setInputValue(cell.content); // Revert changes\n        stopEditing();\n        break;\n      case 'Tab':\n        e.preventDefault();\n        updateCell(cell.id, { content: inputValue });\n        stopEditing();\n        // Move to next cell\n        const nextColumnIndex = e.shiftKey ? columnIndex - 1 : columnIndex + 1;\n        // Handle tab navigation (would need parent component support)\n        break;\n    }\n  }, [cell.id, cell.content, inputValue, updateCell, stopEditing, columnIndex]);\n\n  const handleDoubleClick = useCallback(() => {\n    if (!cell.readonly && onDoubleClick) {\n      onDoubleClick(cell.id);\n    }\n  }, [cell.id, cell.readonly, onDoubleClick]);\n\n  const handleContextMenu = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    if (onContextMenu) {\n      onContextMenu(e, cell.id);\n    }\n  }, [cell.id, onContextMenu]);\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    if (onClick) {\n      onClick(cell.id, e);\n    }\n  }, [cell.id, onClick]);\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    if (!isEditing && onKeyDown) {\n      onKeyDown(e, cell.id);\n    }\n  }, [cell.id, isEditing, onKeyDown]);\n\n  // Get cell display content\n  const getDisplayContent = useCallback(() => {\n    if (cell.formula && cell.formula.startsWith('=')) {\n      // Show calculated value or error\n      return cell.displayValue || cell.error || '#CALC';\n    }\n    \n    switch (cell.type) {\n      case 'boolean':\n        return cell.content === 'true' || cell.content === '1' ? '✓' : '✗';\n      case 'date':\n        if (cell.content) {\n          try {\n            return new Date(cell.content).toLocaleDateString();\n          } catch {\n            return cell.content;\n          }\n        }\n        return '';\n      case 'currency':\n        if (cell.content && !isNaN(parseFloat(cell.content))) {\n          return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD'\n          }).format(parseFloat(cell.content));\n        }\n        return cell.content;\n      case 'percentage':\n        if (cell.content && !isNaN(parseFloat(cell.content))) {\n          return (parseFloat(cell.content) / 100).toLocaleString('en-US', {\n            style: 'percent',\n            minimumFractionDigits: 1\n          });\n        }\n        return cell.content;\n      default:\n        return cell.content;\n    }\n  }, [cell]);\n\n  // Render cell icons\n  const renderCellIcons = useCallback(() => {\n    const icons = [];\n    \n    if (cell.formula) {\n      icons.push(\n        <Calculator \n          key=\"formula\" \n          className=\"w-3 h-3\" \n          style={{ color: theme.colors.semantic.action.primary }}\n          title=\"Contains formula\"\n        />\n      );\n    }\n    \n    if (cell.hyperlink) {\n      icons.push(\n        <Link \n          key=\"link\" \n          className=\"w-3 h-3\" \n          style={{ color: theme.colors.semantic.action.primary }}\n          title=\"Contains hyperlink\"\n        />\n      );\n    }\n    \n    if (cell.image) {\n      icons.push(\n        <Image \n          key=\"image\" \n          className=\"w-3 h-3\" \n          style={{ color: theme.colors.semantic.action.primary }}\n          title=\"Contains image\"\n        />\n      );\n    }\n    \n    if (cell.metadata?.comment) {\n      icons.push(\n        <MessageSquare \n          key=\"comment\" \n          className=\"w-3 h-3\" \n          style={{ color: theme.colors.semantic.text.secondary }}\n          title={cell.metadata.comment}\n        />\n      );\n    }\n    \n    if (cell.readonly) {\n      icons.push(\n        <Lock \n          key=\"readonly\" \n          className=\"w-3 h-3\" \n          style={{ color: theme.colors.semantic.text.secondary }}\n          title=\"Read-only cell\"\n        />\n      );\n    }\n    \n    if (validationErrors.length > 0) {\n      icons.push(\n        <AlertTriangle \n          key=\"error\" \n          className=\"w-3 h-3\" \n          style={{ color: theme.colors.semantic.status.error }}\n          title={validationErrors.join(', ')}\n        />\n      );\n    }\n    \n    return icons.length > 0 ? (\n      <div className=\"absolute top-1 right-1 flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n        {icons}\n      </div>\n    ) : null;\n  }, [cell, theme, validationErrors]);\n\n  // Calculate cell styles\n  const cellStyles: React.CSSProperties = {\n    ...style,\n    backgroundColor: isSelected \n      ? theme.colors.semantic.action.primary + '20'\n      : cell.style?.backgroundColor || style.backgroundColor,\n    color: cell.style?.color || theme.colors.semantic.text.primary,\n    fontWeight: cell.style?.fontWeight || 'normal',\n    fontStyle: cell.style?.fontStyle || 'normal',\n    textDecoration: cell.style?.textDecoration || 'none',\n    textAlign: cell.style?.textAlign || 'left',\n    verticalAlign: cell.style?.verticalAlign || 'middle',\n    fontSize: cell.style?.fontSize ? `${cell.style.fontSize}px` : undefined,\n    fontFamily: cell.style?.fontFamily || undefined,\n    borderTop: cell.style?.borders?.top ? \n      `${cell.style.borders.top.width}px ${cell.style.borders.top.style} ${cell.style.borders.top.color}` : undefined,\n    borderRight: cell.style?.borders?.right ? \n      `${cell.style.borders.right.width}px ${cell.style.borders.right.style} ${cell.style.borders.right.color}` : undefined,\n    borderBottom: cell.style?.borders?.bottom ? \n      `${cell.style.borders.bottom.width}px ${cell.style.borders.bottom.style} ${cell.style.borders.bottom.color}` : undefined,\n    borderLeft: cell.style?.borders?.left ? \n      `${cell.style.borders.left.width}px ${cell.style.borders.left.style} ${cell.style.borders.left.color}` : undefined,\n    padding: cell.style?.padding ? \n      `${cell.style.padding.top}px ${cell.style.padding.right}px ${cell.style.padding.bottom}px ${cell.style.padding.left}px` : '8px',\n    opacity: cell.style?.opacity || 1,\n    transform: cell.style?.transform || undefined,\n    boxShadow: cell.style?.boxShadow || undefined,\n    borderRadius: cell.style?.borderRadius ? `${cell.style.borderRadius}px` : undefined\n  };\n\n  // Add validation error styling\n  if (validationErrors.length > 0) {\n    cellStyles.borderColor = theme.colors.semantic.status.error;\n    cellStyles.borderWidth = '2px';\n    cellStyles.borderStyle = 'solid';\n  }\n\n  return (\n    <td\n      ref={cellRef}\n      className={`relative group cursor-pointer transition-all duration-200 ${className}`}\n      style={cellStyles}\n      rowSpan={mergedSpan.rowSpan}\n      colSpan={mergedSpan.colSpan}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onKeyDown={handleKeyDown}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      tabIndex={0}\n      role=\"gridcell\"\n      aria-selected={isSelected}\n      aria-readonly={cell.readonly}\n      aria-required={cell.required}\n      aria-invalid={validationErrors.length > 0}\n      aria-describedby={cell.tooltip ? `${cell.id}-tooltip` : undefined}\n    >\n      {/* Cell Content */}\n      <div className=\"min-h-[24px] flex items-center justify-start w-full\">\n        {isEditing ? (\n          cell.type === 'rich-text' ? (\n            <textarea\n              ref={inputRef as React.RefObject<HTMLTextAreaElement>}\n              value={inputValue}\n              onChange={handleInputChange}\n              onBlur={handleInputBlur}\n              onKeyDown={handleInputKeyDown}\n              className=\"w-full h-full bg-transparent border-none outline-none resize-none\"\n              style={{\n                color: 'inherit',\n                fontFamily: 'inherit',\n                fontSize: 'inherit',\n                fontWeight: 'inherit',\n                textAlign: 'inherit'\n              }}\n              rows={3}\n              placeholder={cell.placeholder}\n            />\n          ) : (\n            <input\n              ref={inputRef as React.RefObject<HTMLInputElement>}\n              type={cell.type === 'number' || cell.type === 'currency' || cell.type === 'percentage' ? 'number' : \n                   cell.type === 'date' ? 'date' : \n                   cell.type === 'email' ? 'email' : \n                   cell.type === 'phone' ? 'tel' :\n                   cell.type === 'link' ? 'url' : 'text'}\n              value={inputValue}\n              onChange={handleInputChange}\n              onBlur={handleInputBlur}\n              onKeyDown={handleInputKeyDown}\n              className=\"w-full h-full bg-transparent border-none outline-none\"\n              style={{\n                color: 'inherit',\n                fontFamily: 'inherit',\n                fontSize: 'inherit',\n                fontWeight: 'inherit',\n                textAlign: 'inherit'\n              }}\n              placeholder={cell.placeholder}\n              disabled={cell.readonly}\n            />\n          )\n        ) : (\n          <div className=\"w-full flex items-center justify-start\">\n            {/* Cell Type Icon */}\n            {cell.type === 'boolean' && (\n              cell.content === 'true' || cell.content === '1' ? \n                <CheckSquare className=\"w-4 h-4 mr-2\" style={{ color: theme.colors.semantic.status.success }} /> :\n                <Square className=\"w-4 h-4 mr-2\" style={{ color: theme.colors.semantic.text.secondary }} />\n            )}\n            \n            {cell.type === 'number' && (\n              <Hash className=\"w-3 h-3 mr-1 opacity-50\" />\n            )}\n            \n            {/* Content */}\n            <span className=\"truncate\" title={cell.content}>\n              {getDisplayContent()}\n            </span>\n            \n            {/* Hyperlink */}\n            {cell.hyperlink && (\n              <a\n                href={cell.hyperlink.url}\n                target={cell.hyperlink.target || '_blank'}\n                rel=\"noopener noreferrer\"\n                className=\"ml-2 text-blue-500 hover:text-blue-700\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <Link className=\"w-3 h-3\" />\n              </a>\n            )}\n            \n            {/* Image */}\n            {cell.image && (\n              <img\n                src={cell.image.src}\n                alt={cell.image.alt || 'Cell image'}\n                className=\"ml-2 max-w-[50px] max-h-[30px] object-cover rounded\"\n                style={{\n                  width: cell.image.width,\n                  height: cell.image.height,\n                  objectFit: cell.image.fit || 'cover'\n                }}\n              />\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Cell Icons */}\n      {!isEditing && renderCellIcons()}\n\n      {/* Selection Indicator */}\n      {isSelected && (\n        <div \n          className=\"absolute inset-0 pointer-events-none border-2\"\n          style={{ borderColor: theme.colors.semantic.action.primary }}\n        />\n      )}\n      \n      {/* Hover Effect */}\n      {isHovered && !isSelected && (\n        <div \n          className=\"absolute inset-0 pointer-events-none\"\n          style={{ backgroundColor: theme.colors.semantic.action.primary + '10' }}\n        />\n      )}\n\n      {/* Tooltip */}\n      {cell.tooltip && showTooltip && (\n        <div\n          id={`${cell.id}-tooltip`}\n          className=\"absolute z-50 px-2 py-1 text-xs rounded shadow-lg max-w-xs\"\n          style={{\n            backgroundColor: theme.colors.semantic.surface.primary,\n            color: theme.colors.semantic.text.primary,\n            border: `1px solid ${theme.colors.semantic.border.primary}`,\n            bottom: '100%',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            marginBottom: '4px'\n          }}\n        >\n          {cell.tooltip}\n          <div \n            className=\"absolute w-2 h-2 transform rotate-45\"\n            style={{\n              backgroundColor: theme.colors.semantic.surface.primary,\n              border: `1px solid ${theme.colors.semantic.border.primary}`,\n              top: '100%',\n              left: '50%',\n              marginLeft: '-4px',\n              marginTop: '-1px'\n            }}\n          />\n        </div>\n      )}\n\n      {/* Resize Handles (for merged cells) */}\n      {isMerged && isSelected && (\n        <>\n          <div className=\"absolute -right-1 top-0 bottom-0 w-2 cursor-col-resize bg-blue-500 opacity-50\" />\n          <div className=\"absolute -bottom-1 left-0 right-0 h-2 cursor-row-resize bg-blue-500 opacity-50\" />\n          <div className=\"absolute -right-1 -bottom-1 w-2 h-2 cursor-nw-resize bg-blue-500 opacity-75\" />\n        </>\n      )}\n    </td>\n  );\n});\n\nTableCell.displayName = 'TableCell';